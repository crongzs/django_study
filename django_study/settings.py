"""
Django settings for django_study project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR 代表项目所在的路径 不管项目在哪里都能够动态获取到
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*8x+cm=(ry6+(z50b&%j#ffx@r8i*^q1wzt^6ao_jsh#6&j^fk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

# 允许访问的ip地址
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'app1',
    'app2',
    'app3',
    'app4',
    'app5',
    'app6',
    'app7',
    'app8',
    'app9',
    'app10',
    'app11',
    'app12',
    # 'app13',
    'app14',
    'app15',
    'app16',
    'app17',
    'app18',
    'app19',
    'app20',
    'error'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'app10.middlewares.app10_user_middleware'
    'app10.middlewares.App10UserMiddleware',
    # 'app10.middlewares.App10UserMiddlewareMixin'
    # app11 中定义的装饰器
    'app11.middlewares.app11_user_middleware',

]

ROOT_URLCONF = 'django_study.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # django模版的查找路径
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        # 设置为True表示django除了去DIRS里面的路径查找模版文件，还会去app下面查找templates(app必须在INSTALLED_APPS中注册)
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # Django默认添加的上下文处理器
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                # 自定义的上下文处理器
                'app9.context_processors.login_user',
            ],
            # 将模版标签添加到 builtins 中，变成django的内置标签，以后在模版中使用的时候就不用load
            'builtins': [
                # 将static添加到builtins中，将static变成django内置标签
                'django.templatetags.static'
            ]
        },
    },
]

WSGI_APPLICATION = 'django_study.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django_study',
        'USER': 'root',
        'PASSWORD': 'mysqlmysql',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}


# 缓存

# 更改 Django memcached 默认的 key值设置规则
def KEY_FUNCTION(key, key_prefix, version):
    return 'django:' + key


CACHES = {
    'default': {
        # memcached
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'KEY_FUNCTION': lambda key, key_prefix, version: 'django:' + key
        # 'KEY_FUNCTION': KEY_FUNCTION,
    }
}

'''
Memcached 的一个出色功能是它能够在多个服务器上共享缓存。这意味着您可以在多台计算机上运行 Memcached 守护程序，
程序会视这组计算机为单个缓存，而无需在每台机器上复制缓存值。要使用此功能，需要在 LOCATION 中包含所有服务器的地址，
可以是分号或者逗号分隔的字符串，也可以是一个列表。

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': [
            '172.19.26.240:11211',
            '172.19.26.242:11211',
        ]
    }
}

在这个示例中，缓存通过端口 11211 的 IP 地址 172.19.26.240 、 172.19.26.242 运行的 Memcached 实例共享：
'''

# session 存储方式
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# AUTH_USER_MODEL 使用 继承AbstractUser 扩展 User 时，用来告诉django 验证的模型
# AUTH_USER_MODEL = 'app13.User'  # 不需要写成 'app13.models.User' 而是 'app13.User' 就可以了

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

# 如果USE_TZ设置为False，那么Django获取到的时间就是一个 navie time 类型的时间
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# STATIC_URL 是用来在浏览其中请求静态文件的URL 如127.0.0.1/static/xxx.jpng
STATIC_URL = '/static/'
# 不和任何 app 相关的静态文件，或者其它特殊的静态文件都可以放到 STATICFILES_DIRS 中添加的目录中单独区别存放
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

# 文件上传
# MEDIA_ROOT 上传文件的存放目录
MEDIA_ROOT = '/Users/ku_rong/Desktop/'
# MEDIA_URL 上传文件的浏览地址
MEDIA_URL = '/media/'  # 127.0.0.1/media/xxx.jpng

# rest_framework
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# 日志
LOG_DIR = os.path.join(BASE_DIR, 'log')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'formatter': 'verbose',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'backend.log'),
            'when': 'midnight',
            'interval': 1
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        }
    },
}

# 限速截流
REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '2/day',
        'user': '3/day'
    }
}
